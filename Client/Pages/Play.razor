@page "/play"
@using System.Timers;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WebAssemblyTest.Shared
@using WebAssemblyTest.Client.Services
@attribute [Authorize]
@inject SwapiService service

@if (user != null)
{
	<div class="row">
		<div class="col">
			<h1>Play</h1>
		</div>
		<div class="col text-end my-auto">
			<h3>Total Credits: @user.Credits</h3>
		</div>
	</div>
	<div>
		Rate: @user.ClickRate
	</div>

	<div class="row">
		<div class="col text-center mt-4">
			<button class="btn btn-success btn-lg" type="button" @onclick="IncrementCredits" onkeydown="return (event.keyCode!=13)">$$$</button>
		</div>
	</div>
	<div class="row mt-4">
		<div class="col text-end">
			<button class="btn btn-primary" type="button" @onclick="IncreaseRate">Upgrade Rate</button>
		</div>
		<div class="col my-auto">
			Cost: @RateUpgradeCost
		</div>
	</div>
}

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	private User user;

	private double autoclickRate;


	private long RateUpgradeCost { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateTask;
		var name = authState.User.Identity.Name;
		user = await service.GetUserFromApi(name);
		
		if (user.ClickRate == 1)
		{
			RateUpgradeCost = 10;
		}
		else
		{
			RateUpgradeCost = user.ClickRate * user.ClickRate * 10;
		}
	}

	private async Task IncrementCredits()
	{
		await service.UpdateCredits(user.Id, user.ClickRate);
		user.Credits += user.ClickRate;
	}

	private async Task IncreaseRate()
	{
		//long cost = rate * rate * 10;
		if (user.Credits >= RateUpgradeCost)
		{
			user.Credits -= RateUpgradeCost;
			await service.UpdateClickRate(user.Id, user.Credits);
			user.ClickRate *= 2;
		}
		RateUpgradeCost = user.ClickRate * user.ClickRate * 10;
	}
}
